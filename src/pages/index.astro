---
import Layout from "@/layouts/Layout.astro";
import Dashboard from "@/components/dashboard";

---

<Layout title="Medlex+">
  <div>
    <Dashboard client:load />
  </div>
</Layout>

<script is:inline>
  function takeLocation(data, instance) {
    instance.send({
      input: {
        text: "Ok I've shared my location.",
      },
      context: {
        skills: {
          "actions skill": {
            skill_variables: {
              User_Latitude: data.coords.latitude,
              User_Longitude: data.coords.longitude,
            },
          },
        },
      },
    });
  }

  function getLocationError(error, instance) {
    let text = "There was an error sharing my location.";
    // See https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError.
    if (error.code === GeolocationPositionError.PERMISSION_DENIED) {
      text = "I don't want to share my location at this time.";
    } else if (error.code === GeolocationPositionError.POSITION_UNAVAILABLE) {
      text = "The browser encountered an error sharing my location.";
    }
    instance.send({ input: { text } });
  }

  window.getWatsonInstance = async function (maxAttempts = 10) {
    return new Promise((resolve, reject) => {
      let attempts = 0;

      const checkInstance = () => {
        const instance = window.watsonAssistantChatOptions?.instance;
        if (instance) {
          resolve(instance);
        } else if (attempts < maxAttempts) {
          attempts++;
          setTimeout(checkInstance, 500); // Try again in 500ms
        } else {
          reject(new Error("Failed to get Watson Assistant instance"));
        }
      };

      checkInstance();
    });
  };

  window.sendWatsonMessage = async function (text) {
    try {
      const instance = await window.getWatsonInstance();
      await instance.send({ input: { text } });
    } catch (error) {}
  };

  window.watsonAssistantChatOptions = {
    integrationID: "014df85f-00b8-4372-8bb7-80fe1988a97a",
    region: "eu-de",
    serviceInstanceID: "7a8af923-faf2-4b22-8822-f29c70886c77",
    onLoad: async (instance) => {
      window.watsonAssistantChatOptions.instance = instance;

      // Add event listener for user messages
      instance.on({
        type: "send",
        handler: (event) => {
          const userMessage = event.data.input?.text?.toLowerCase() || "";
          const locationKeywords = [
            "location",
            "where",
            "nearby",
            "close to me",
            "near me",
          ];

          if (
            locationKeywords.some((keyword) => userMessage.includes(keyword))
          ) {
            navigator.geolocation.getCurrentPosition(
              (data) => takeLocation(data, instance),
              (error) => getLocationError(error, instance)
            );
          }
        },
      });

      await instance.render();
    },
  };
  setTimeout(function () {
    const t = document.createElement("script");
    t.src =
      "https://web-chat.global.assistant.watson.appdomain.cloud/versions/" +
      (window.watsonAssistantChatOptions.clientVersion || "latest") +
      "/WatsonAssistantChatEntry.js";
    document.head.appendChild(t);
  });
</script>

<style is:global>
  #WACWidget {
    position: relative !important;
    box-shadow: none !important;
    width: 100% !important;
    min-height: 50vh !important;
    max-height: 70vh !important;
    left: 0 !important;
    right: 0 !important;
    margin-top: 33px !important;
    max-width: none !important;
  }

  .WatsonAssistantChatHost[style*="width"],
  .WatsonAssistantChatHost[style*="height"] {
    width: 100% !important;
    height: 100% !important;
    max-width: 100% !important;
    min-width: 100% !important;
    max-height: 100% !important;
    min-height: 100% !important;
    position: relative !important;
    padding: 20px !important;
    display: flex !important;
  }

  .WACInputContainer {
    background: #96beb1 !important;
  }

  #WAC__messages {
    background: #c2eadb !important;
  }

  .WAC__sent--bubble {
    background: #45c05b !important;
    border: 1px solid #1b684f !important;
  }
</style>
